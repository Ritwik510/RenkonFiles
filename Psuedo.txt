
RENKON

Pseudo code



Header : Algorithm for Renkon.

Declarations: str(char) and val(long double) are vectors of size 25 and 15 respectively;  num1, num2 are integer variables; A, result are long double variables.



Function ReadCurrencies(): k is a local integer variable.


1.[Read Different Currencies from a file present in system ]
   
   [Currency_names consists of names of different currencies and corresponding currency numbers]
   
   Open Currency_names file for input
 
   Repeat thru step 1.2 while not eof

   1.1.Read from Currency_names into str

              Repeat step 1.2 for k <— 1 to 25
     
              1.2.          Write(str[k])
   
 
2.[Close file]

    Close Currency_names file
 

3.[Return to invoking routine]
    
    Return                                                  


Function ReadExValues():

1.[Open file]

   [Ex_Rates consists of exchange rates of about 15 countries with respect to US $]
   
   Open Ex_Rates file for input

2.[Read file values]
  
     Read from Ex_Rates into val

3.[Close file]

    Close Ex_Rates file
 

4.[Return to invoking routine]
    
    Return                                                  


Function CalcDisp(A, num1, num2, val): A is a long double variable; num1, num2 are two integer variables; val is a long double vector of size 15; temp1 ,temp2 are two local long double variables.

1.[Result calculation]
   
   temp1 <— A/( val(num1))
   
   temp2 <— temp1 * val(num2)

2.[Return to invoking routine and return temp2]
    
    Return(temp2)                                               




Algorithm:

1.[Write names of different currencies and corresponding currency numbers]

    Call ReadCurrencies()

2.[Load Currency_names file’s content into val]
  
    Call ReadExValues()

3.[Read Amount]
   
   Read(A) 
  
4.[Read Currency no. of the entered amount]
   
   Read(num1)

5.[Read Currency no. of the currency to be converted to]
   
  Read(num2)

6.[Calculate result]

     result <— Call CalcDisp(A, num1, num2, val)

7.[Write result]

    Write(result)

8.Halt                                                                                                                         





